https://ideone.com/pipIgq
#include <GL/glut.h>
#include <GL/gl.h>
#include<stdio.h>

float tmp[] = { 0,0,1 };
float tmp2[] = { 0,1,0 };
float shipX = 0.0; // Initial x-coordinate of the ship
float bridgeWidth = 300.0;
void myInit(void) {
	glClearColor(0, 0, 0, 0);
	glMatrixMode(GL_PROJECTION);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluOrtho2D(0.0, 1500.0, 0.0, 1000.0);
	glFlush();
}

void drawSquare(int h, int w, int x, int y, float curentColor[3]) {
	glColor3f(curentColor[0], curentColor[1], curentColor[2]);
	glBegin(GL_QUADS);
	glVertex2f(x, y);
	glVertex2f(x + w, y);
	glVertex2f(x + w, y);
	glVertex2f(x + w, y + h);
	glVertex2f(x + w, y + h);
	glVertex2f(x, y + h);
	glVertex2f(x, y + h);
	glVertex2f(x, y);
	glEnd();
	glFlush();
}
void getWidthSquare(int w, int x1, int y1, int x2, int y2) {
	glColor3f(0, 0, 0.5);
	glBegin(GL_QUADS);
	glVertex2f(x1, y1);
	glVertex2f(x2, y2);
	glVertex2f(x2 + w, y2);
	glVertex2f(x1 + w, y1);
	glEnd();
	glFlush();
}
void getHeightSquare(int h, int x1, int y1, int x2, int y2) {
	glColor3f(0.5, 0.5, 0.2);
	glBegin(GL_QUADS);
	glVertex2f(x1, y1);
	glVertex2f(x2, y2);
	glVertex2f(x2, y2 + h);
	glVertex2f(x1, y1 + h);
	glEnd();
	glFlush();
}float frontColor[] = { 0, 0.5, 0.2 };
void drawBase(int h, int w, int x1, int y1, int x2, int y2) {
	glBegin(GL_QUADS);
	glColor3f(0, 0.5, 0.2);
	getWidthSquare(w, x1, y1 + h, x2, y2 + h);//top
	getHeightSquare(h, x1, y1, x2, y2);//left-side
	drawSquare(h, w, x1, y1, frontColor);
	glEnd();
	glFlush();

}
void drawTriangles(int x1, int y1, int x2, int y2, int x3, int y3, float curentColor[3]) {
	glColor3f(curentColor[0], curentColor[1], curentColor[2]);
	glBegin(GL_TRIANGLES);
	glVertex2f(x1, y1);
	glVertex2f(x2, y2);
	glVertex2f(x3, y3);
	glEnd();
	glFlush();
}

void bridge() {
	getWidthSquare(650, 0, 250, -50, 280);
	getWidthSquare(1000, 850, 250, 800, 280);
}
void boat(int s, int x, int y) {
	frontColor[0] = 0;
	frontColor[1] = 0.5;
	frontColor[2] = 0.2;
	drawBase(25 * s, 55 * s, 180 * s + x, 200 * s + y, 130 * s + x, 250 * s + y);
	drawBase(18 * s, 50 * s, 180 * s + x, 228 * s + y, 136 * s + x, 272 * s + y);
	drawBase(14 * s, 45 * s, 180 * s + x, 248 * s + y, 142 * s + x, 286 * s + y);
	drawSquare(70 * s, 20 * s, 162 * s + x, 290 * s + y, frontColor);
	getHeightSquare(70 * s, 190 * s + x, 280 * s + y, 182 * s + x, 290 * s + y);
	getHeightSquare(70 * s, 170 * s + x, 280 * s + y, 162 * s + x, 290 * s + y);
	frontColor[0] = 2;
	drawSquare(70 * s, 20 * s, 170 * s + x, 280 * s + y, frontColor);
	frontColor[2] = 0.6;
	drawTriangles(235 * s + x, 200 * s + y, 235 * s + x, 225 * s + y, 265 * s + x, 218 * s + y, frontColor);
	float tmpColor[] = { 0,0,0 };
	drawTriangles(180 * s + x, 200 * s + y, 235 * s + x, 200 * s + y, 265 * s + x, 218 * s + y, tmpColor);
	frontColor[2] = 0;
	frontColor[1] = 0.5;
	frontColor[0] = 1;
	drawTriangles(180 * s + x, 200 * s + y, 180 * s + x, 225 * s + y, 265 * s + x, 218 * s + y, frontColor);



}
void ocean() {
	glBegin(GL_QUADS);
	glColor3f(0.0, 0.4, 0.6);
	glVertex2f(0, 0);
	glVertex2f(1500, 0);
	glVertex2f(1500, 700);
	glVertex2f(0, 680);
	glEnd();
	glFlush();
}


void myDisplay(void) {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glColor3f(0.0f, 1, 1);
	ocean();
	bridge();
	glPushMatrix();
	glTranslatef(shipX, -shipX, 0);
	boat(2, 160, 0);
	glPopMatrix();

	


}void timer(int value) {
	

	shipX += 1; // Move the ship rightward
	// Reset the ship position to the left of the bridge
	if (shipX >=  700) {
		shipX = 0;
	}
	glutPostRedisplay(); // Redraw the scene
	glutTimerFunc(100, timer, 0); // Call the timer function after 10 milliseconds
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1500, 1000);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("first");
	glutDisplayFunc(myDisplay);
	myInit();
	glutTimerFunc(100, timer, 0);
	glutMainLoop();

}


// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file



//void filling(float x, float y, float CurentColor[3], float NewColor[3])
//{
//	float CurentPixel[3];
//	glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, &CurentPixel);
//	cout << CurentPixel[0] << " ";
//	if (CurentPixel[0] != CurentColor[0] && CurentPixel[1] != CurentColor[1] && CurentPixel[2] != CurentColor[2])
//	{
//
//		glBegin(GL_POINTS);
//		glColor3f(NewColor[0], NewColor[1], NewColor[2]);
//		glVertex2f(x, y);
//		glEnd();
//
//		filling(x + 1, y, CurentColor, NewColor);
//		filling(x - 1, y, CurentColor, NewColor);
//		filling(x, y - 1, CurentColor, NewColor);
//		filling(x, y + 1, CurentColor, NewColor);
//	}
//	return;
//}
//void translateCube(int length, int x1, int y1, int x2, int y2, int tx, int ty) {
//	joinEdgePoints(length, x1 + tx, y1 + ty, x2 + tx, y2 + ty);
//	//drawSquare(length, x2 + tx, y2 + ty, tmp2);
//	drawSquare(length, x1 + tx, y1 + ty, tmp);
//
//
//
//}
//void scaleCube(int length, int x1, int y1, int x2, int y2, int s) {
//	joinEdgePoints(length * s, x1 * s, y1 * s, x2 * s, y2 * s);
//	//drawSquare(length * s, x2 * s, y2 * s, tmp2);
//	drawSquare(length * s, x1 * s, y1 * s, tmp);

//}